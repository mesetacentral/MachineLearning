# 92% accuracy in 12s
max_depth = 15
min_split_size = 5
ratio_samples = 0.2
num_trees = 12
num_features_node = 28  # int(np.sqrt(X_train.shape[1]))
coefficient = 'Gini'  # 'MSE' works but is not fully implemented
percentile = 90  # does not affect accuracy nor performance
values = [1]  # this works because almost all values are 0 or 255, there are very few inbetweeners
min_std_deviation = 80
# Joel Guevara and his team found that values = [1] works as fine as [32, 64, 96, 128, 160, 192, 224]

# 90% accuracy in under 9s
max_depth = 12
min_split_size = 5
ratio_samples = 0.35
num_trees = 5
num_features_node = 28  # int(np.sqrt(X_train.shape[1]))
coefficient = 'Gini'  # 'MSE' works but is not fully implemented
percentile = 90  # does not affect accuracy nor performance
values = [1]  # this works because almost all values are 0 or 255, there are very few inbetweeners
min_std_deviation = 90
# Joel Guevara and his team found that values = [1] works as fine as [32, 64, 96, 128, 160, 192, 224]

------------------------------------------------

# 86% accuracy in 5s
max_depth = 15
min_split_size = 5
ratio_samples = 1
num_trees = 1
num_features_node = 28  # int(np.sqrt(X_train.shape[1]))
coefficient = 'Gini'  # 'MSE' works but is not fully implemented
percentile = 90  # does not affect accuracy nor performance
values = [1]  # this works because almost all values are 0 or 255, there are very few inbetweeners
min_std_deviation = 80
# Joel Guevara and his team found that values = [1] works as fine as [32, 64, 96, 128, 160, 192, 224]

# 88% accuracy in under 7s
max_depth = 9
min_split_size = 5
ratio_samples = 0.05
num_trees = 15
num_features_node = 28  # int(np.sqrt(X_train.shape[1]))
coefficient = 'Gini'  # 'MSE' works but is not fully implemented
percentile = 90  # does not affect accuracy nor performance
values = [1]  # this works because almost all values are 0 or 255, there are very few inbetweeners
min_std_deviation = 80
# Joel Guevara and his team found that values = [1] works as fine as [32, 64, 96, 128, 160, 192, 224]

# 93% accuracy in 20s
max_depth = 15
min_split_size = 5
ratio_samples = 0.35
num_trees = 12
num_features_node = 28  # int(np.sqrt(X_train.shape[1]))
coefficient = 'Gini'  # 'MSE' works but is not fully implemented
percentile = 90  # does not affect accuracy nor performance
values = [1]  # this works because almost all values are 0 or 255, there are very few inbetweeners
min_std_deviation = 80
# Joel Guevara and his team found that values = [1] works as fine as [32, 64, 96, 128, 160, 192, 224]

# almost 94% accuracy in under 30s
max_depth = 20
min_split_size = 5
ratio_samples = 0.7
num_trees = 10
num_features_node = 28  # int(np.sqrt(X_train.shape[1]))
coefficient = 'Gini'  # 'MSE' works but is not fully implemented
percentile = 90  # does not affect accuracy nor performance
values = [1]  # this works because almost all values are 0 or 255, there are very few inbetweeners
min_std_deviation = 80
# Joel Guevara and his team found that values = [1] works as fine as [32, 64, 96, 128, 160, 192, 224]